{
  "name": "Smart Chat Bot with AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-bot",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-chat",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract message and context\nconst { message, context, history } = $input.item.json;\n\n// Build conversation history for AI\nlet conversationHistory = '';\nif (history && history.length > 0) {\n  conversationHistory = history.map(msg => \n    `${msg.sender === 'user' ? 'Customer' : 'Assistant'}: ${msg.text}`\n  ).join('\\n');\n}\n\n// Prepare context for AI\nconst systemPrompt = `You are a helpful e-commerce assistant for Volaron Store. \nYou help customers with:\n- Product information and recommendations\n- Order status and tracking\n- Return and refund policies\n- General store inquiries\n\nBe friendly, helpful, and concise. If you don't know something, offer to connect them with human support.\n\nConversation history:\n${conversationHistory}\n\nCustomer's current message: ${message}`;\n\nreturn {\n  prompt: systemPrompt,\n  message: message,\n  context: context\n};"
      },
      "id": "prepare-context",
      "name": "Prepare AI Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "http://ollama.railway.internal:11434/api/generate",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama3.1"
            },
            {
              "name": "prompt",
              "value": "={{$json[\"prompt\"]}}"
            },
            {
              "name": "stream",
              "value": "={{false}}"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "max_tokens",
              "value": "500"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "ai-response",
      "name": "Generate AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"message\"].toLowerCase()}}",
              "operation": "contains",
              "value2": "status do meu pedido"
            }
          ]
        }
      },
      "id": "check-order-query",
      "name": "Check Order Query",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "url": "={{$env[\"MEDUSA_BACKEND_URL\"]}}/store/orders",
        "method": "GET",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "medusaApi",
        "qs": {
          "parameters": [
            {
              "name": "email",
              "value": "={{$json[\"customer_email\"]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "fetch-orders",
      "name": "Fetch Customer Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"message\"].toLowerCase()}}",
              "operation": "contains",
              "value2": "falar com atendente"
            }
          ]
        }
      },
      "id": "check-human-support",
      "name": "Check Human Support",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 500]
    },
    {
      "parameters": {
        "url": "={{$env[\"N8N_WEBHOOK_URL\"]}}/webhook/human-support-requested",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "customer_message",
              "value": "={{$json[\"message\"]}}"
            },
            {
              "name": "conversation_history",
              "value": "={{$json[\"history\"]}}"
            },
            {
              "name": "timestamp",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        },
        "options": {}
      },
      "id": "notify-support",
      "name": "Notify Support Team",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1050, 600]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "response",
              "value": "Entendi que você quer falar com um atendente. Já notifiquei nossa equipe de suporte e alguém entrará em contato em breve. Enquanto isso, posso continuar ajudando com outras dúvidas!"
            }
          ]
        },
        "options": {}
      },
      "id": "human-support-response",
      "name": "Human Support Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1250, 600]
    },
    {
      "parameters": {
        "mode": "responseNode"
      },
      "id": "respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "jsCode": "// Format the final response\nconst aiResponse = $input.all()[0].json.response || \n                   $input.all()[0].json.message || \n                   'Desculpe, não consegui processar sua mensagem.';\n\n// Add order information if available\nlet finalResponse = aiResponse;\n\nif ($input.all()[0].json.orders) {\n  const orders = $input.all()[0].json.orders;\n  if (orders.length > 0) {\n    finalResponse += '\\n\\nSeus pedidos recentes:';\n    orders.slice(0, 3).forEach(order => {\n      finalResponse += `\\n- Pedido #${order.display_id}: ${order.fulfillment_status || 'Processando'}`;\n    });\n  }\n}\n\nreturn {\n  response: finalResponse,\n  timestamp: new Date().toISOString(),\n  context: $input.all()[0].json.context\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"message\"].toLowerCase()}}",
              "operation": "contains",
              "value2": "produto"
            }
          ]
        }
      },
      "id": "check-product-query",
      "name": "Check Product Query",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 100]
    },
    {
      "parameters": {
        "url": "={{$env[\"MEDUSA_BACKEND_URL\"]}}/store/products",
        "method": "GET",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "medusaApi",
        "qs": {
          "parameters": [
            {
              "name": "q",
              "value": "={{$json[\"message\"]}}"
            },
            {
              "name": "limit",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "id": "search-products",
      "name": "Search Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1050, 0]
    }
  ],
  "connections": {
    "Chat Webhook": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Context": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Response": {
      "main": [
        [
          {
            "node": "Check Order Query",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Human Support",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Product Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Order Query": {
      "main": [
        [
          {
            "node": "Fetch Customer Orders",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Human Support": {
      "main": [
        [
          {
            "node": "Notify Support Team",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Product Query": {
      "main": [
        [
          {
            "node": "Search Products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Customer Orders": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Support Team": {
      "main": [
        [
          {
            "node": "Human Support Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Human Support Response": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Products": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}